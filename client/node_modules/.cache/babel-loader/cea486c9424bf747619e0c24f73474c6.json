{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import DeleteBtn from \"../components/DeleteBtn\";\n// import Jumbotron from \"../components/Jumbotron\";\n// import API from \"../utils/API\";\n// import { Link } from \"react-router-dom\";\n// import { Col, Row, Container } from \"../components/Grid\";\n// import { List, ListItem } from \"../components/List\";\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\n// function Books() {\n//   // Setting our component's initial state\n//   const [books, setBooks] = useState([])\n//   const [formObject, setFormObject] = useState({})\n//   // Load all books and store them with setBooks\n//   useEffect(() => {\n//     loadBooks()\n//   }, [])\n//   // Loads all books and sets them to books\n//   function loadBooks() {\n//     API.getBooks()\n//       .then(res => \n//         setBooks(res.data)\n//       )\n//       .catch(err => console.log(err));\n//   };\n//   // Deletes a book from the database with a given id, then reloads books from the db\n//   function deleteBook(id) {\n//     API.deleteBook(id)\n//       .then(res => loadBooks())\n//       .catch(err => console.log(err));\n//   }\n//   // Handles updating component state when the user types into the input field\n//   function handleInputChange(event) {\n//     const { name, value } = event.target;\n//     setFormObject({...formObject, [name]: value})\n//   };\n//   // When the form is submitted, use the API.saveBook method to save the book data\n//   // Then reload books from the database\n//   function handleFormSubmit(event) {\n//     event.preventDefault();\n//     if (formObject.title && formObject.author) {\n//       API.saveBook({\n//         title: formObject.title,\n//         author: formObject.author,\n//         synopsis: formObject.synopsis\n//       })\n//         .then(res => loadBooks())\n//         .catch(err => console.log(err));\n//     }\n//   };\n//     return (\n//       <Container fluid>\n//         <Row>\n//           <Col size=\"md-6\">\n//             <Jumbotron>\n//               <h1>What Books Should I Read?</h1>\n//             </Jumbotron>\n//             <form>\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"title\"\n//                 placeholder=\"Title (required)\"\n//               />\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"author\"\n//                 placeholder=\"Author (required)\"\n//               />\n//               <TextArea\n//                 onChange={handleInputChange}\n//                 name=\"synopsis\"\n//                 placeholder=\"Synopsis (Optional)\"\n//               />\n//               <FormBtn\n//                 disabled={!(formObject.author && formObject.title)}\n//                 onClick={handleFormSubmit}\n//               >\n//                 Submit Book\n//               </FormBtn>\n//             </form>\n//           </Col>\n//           <Col size=\"md-6 sm-12\">\n//             <Jumbotron>\n//               <h1>Books On My List</h1>\n//             </Jumbotron>\n//             {books.length ? (\n//               <List>\n//                 {books.map(book => (\n//                   <ListItem key={book._id}>\n//                     <Link to={\"/books/\" + book._id}>\n//                       <strong>\n//                         {book.title} by {book.author}\n//                       </strong>\n//                     </Link>\n//                     <DeleteBtn onClick={() => deleteBook(book._id)} />\n//                   </ListItem>\n//                 ))}\n//               </List>\n//             ) : (\n//               <h3>No Results to Display</h3>\n//             )}\n//           </Col>\n//         </Row>\n//       </Container>\n//     );\n//   }\n// export default Books;","map":{"version":3,"sources":["/Users/MX/Desktop/GIT Working/uofo-por-fsf-pt-07-2020-u-c/21-MERN/01-Activities/05-Stu_ReactRouter/Solved/client/src/pages/Books.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import DeleteBtn from \"../components/DeleteBtn\";\n// import Jumbotron from \"../components/Jumbotron\";\n// import API from \"../utils/API\";\n// import { Link } from \"react-router-dom\";\n// import { Col, Row, Container } from \"../components/Grid\";\n// import { List, ListItem } from \"../components/List\";\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\n\n// function Books() {\n//   // Setting our component's initial state\n//   const [books, setBooks] = useState([])\n//   const [formObject, setFormObject] = useState({})\n\n//   // Load all books and store them with setBooks\n//   useEffect(() => {\n//     loadBooks()\n//   }, [])\n\n//   // Loads all books and sets them to books\n//   function loadBooks() {\n//     API.getBooks()\n//       .then(res => \n//         setBooks(res.data)\n//       )\n//       .catch(err => console.log(err));\n//   };\n\n//   // Deletes a book from the database with a given id, then reloads books from the db\n//   function deleteBook(id) {\n//     API.deleteBook(id)\n//       .then(res => loadBooks())\n//       .catch(err => console.log(err));\n//   }\n\n//   // Handles updating component state when the user types into the input field\n//   function handleInputChange(event) {\n//     const { name, value } = event.target;\n//     setFormObject({...formObject, [name]: value})\n//   };\n\n//   // When the form is submitted, use the API.saveBook method to save the book data\n//   // Then reload books from the database\n//   function handleFormSubmit(event) {\n//     event.preventDefault();\n//     if (formObject.title && formObject.author) {\n//       API.saveBook({\n//         title: formObject.title,\n//         author: formObject.author,\n//         synopsis: formObject.synopsis\n//       })\n//         .then(res => loadBooks())\n//         .catch(err => console.log(err));\n//     }\n//   };\n\n//     return (\n//       <Container fluid>\n//         <Row>\n//           <Col size=\"md-6\">\n//             <Jumbotron>\n//               <h1>What Books Should I Read?</h1>\n//             </Jumbotron>\n//             <form>\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"title\"\n//                 placeholder=\"Title (required)\"\n//               />\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"author\"\n//                 placeholder=\"Author (required)\"\n//               />\n//               <TextArea\n//                 onChange={handleInputChange}\n//                 name=\"synopsis\"\n//                 placeholder=\"Synopsis (Optional)\"\n//               />\n//               <FormBtn\n//                 disabled={!(formObject.author && formObject.title)}\n//                 onClick={handleFormSubmit}\n//               >\n//                 Submit Book\n//               </FormBtn>\n//             </form>\n//           </Col>\n//           <Col size=\"md-6 sm-12\">\n//             <Jumbotron>\n//               <h1>Books On My List</h1>\n//             </Jumbotron>\n//             {books.length ? (\n//               <List>\n//                 {books.map(book => (\n//                   <ListItem key={book._id}>\n//                     <Link to={\"/books/\" + book._id}>\n//                       <strong>\n//                         {book.title} by {book.author}\n//                       </strong>\n//                     </Link>\n//                     <DeleteBtn onClick={() => deleteBook(book._id)} />\n//                   </ListItem>\n//                 ))}\n//               </List>\n//             ) : (\n//               <h3>No Results to Display</h3>\n//             )}\n//           </Col>\n//         </Row>\n//       </Container>\n//     );\n//   }\n\n\n// export default Books;\n"]},"metadata":{},"sourceType":"module"}