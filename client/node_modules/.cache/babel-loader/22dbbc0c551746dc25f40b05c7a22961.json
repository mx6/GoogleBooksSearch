{"ast":null,"code":"import _toConsumableArray from \"/Users/MX/Desktop/GoogleBooksSearch/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/MX/Desktop/GoogleBooksSearch/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/MX/Desktop/GoogleBooksSearch/client/src/pages/Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport axios from \"axios\";\nimport { Card, Button } from \"react-bootstrap\";\n\nfunction Books() {\n  var _this = this;\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1];\n\n  var _useState5 = useState(\"cujo\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      search = _useState6[0],\n      setSearch = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchbyAuthor = _useState8[0],\n      setSearchByAuthor = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchResults = _useState10[0],\n      setSearchResults = _useState10[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []);\n  useEffect(function () {\n    // console.log(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\n    axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + search).then(function (resp) {\n      setBooks(resp.data.items);\n    });\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      console.log(res);\n      setBooks(res.data.data.items);\n    } // console.log(res)\n    ).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value; // setFormObject({...formObject, [name]: value})\n\n    console.log(event.target.value);\n    setSearch(event.target.value);\n  }\n\n  ;\n\n  function searchByAuthor(event) {\n    var _event$target2 = event.target,\n        name = _event$target2.name,\n        value = _event$target2.value; // setFormObject({...formObject, [name]: value})\n\n    setSearchByAuthor(value);\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function addToDatabase(event, item) {\n    event.preventDefault();\n    console.log(item.volumeInfo); // if (formObject.title) {\n\n    API.saveBook({\n      title: item.volumeInfo.title,\n      author: item.volumeInfo.author,\n      synopsis: item.volumeInfo.description\n    }).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    }); // }\n  }\n\n  ;\n\n  function handleFormSubmit(event) {\n    event.preventDefault(); // console.log(books)\n    // if (formObject.title) {\n\n    axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + search).then(function (res) {\n      setBooks(_toConsumableArray(res.data.items));\n      console.log(res);\n    }).catch(function (err) {\n      return console.log(err);\n    }); // }\n  }\n\n  ; // console.log(typeof books)\n\n  console.log(searchResults);\n  console.log(search);\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"Search For a Book\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: search,\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    value: searchbyAuthor,\n    onChange: searchByAuthor,\n    name: \"author\",\n    placeholder: \"Author (Optional)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn // disabled={!(formObject.title)}\n  , {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Submit Book\")))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"displayBookHere\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, books.map(function (book) {\n    return /*#__PURE__*/React.createElement(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      as: \"h5\",\n      className: \"bg-light d-flex justify-content-between\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 18\n      }\n    }, book.volumeInfo.title), /*#__PURE__*/React.createElement(Button, {\n      onClick: function onClick(event) {\n        return addToDatabase(event, book);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 18\n      }\n    }, \"Save\")), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, book.volumeInfo.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, book.volumeInfo.description));\n  })));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/MX/Desktop/GoogleBooksSearch/client/src/pages/Search.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","axios","Card","Button","Books","books","setBooks","formObject","setFormObject","search","setSearch","searchbyAuthor","setSearchByAuthor","searchResults","setSearchResults","loadBooks","get","then","resp","data","items","getBooks","res","console","log","catch","err","deleteBook","id","handleInputChange","event","target","name","value","searchByAuthor","addToDatabase","item","preventDefault","volumeInfo","saveBook","title","author","synopsis","description","handleFormSubmit","map","book","authors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport axios from \"axios\";\nimport { Card, Button } from \"react-bootstrap\"\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({})\n  const [search, setSearch] = useState(\"cujo\")\n  const [searchbyAuthor, setSearchByAuthor] = useState(\"\")\n  const [searchResults, setSearchResults] = useState([])\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  useEffect( () => {\n    // console.log(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\n      axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\n    .then(resp => {\n      setBooks(resp.data.items)\n      }\n    )\n    \n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => {\n        console.log(res)\n        setBooks(res.data.data.items)}\n        // console.log(res)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    // setFormObject({...formObject, [name]: value})\n    console.log(event.target.value)\n    setSearch(event.target.value)\n    \n  };\n\n  function searchByAuthor(event) {\n    const { name, value } = event.target;\n    // setFormObject({...formObject, [name]: value})\n    setSearchByAuthor(value)\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function addToDatabase(event, item) {\n    event.preventDefault();\n    console.log(item.volumeInfo)\n    // if (formObject.title) {\n      API.saveBook({\n        title: item.volumeInfo.title,\n        author: item.volumeInfo.author,\n        synopsis: item.volumeInfo.description\n      })\n        .then(res => loadBooks())\n        .catch(err => console.log(err));\n    // }\n  };\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    // console.log(books)\n    // if (formObject.title) {\n        axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\n        .then(res => {setBooks([...res.data.items]) \n          console.log(res)})\n        \n        .catch(err => console.log(err));\n    // }\n  };\n\n  // console.log(typeof books)\n  console.log(searchResults)\n  console.log(search)\n    return (\n      \n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n              <h3>Search For a Book</h3>\n            </Jumbotron>\n            <form>\n              <Input\n                value={search}\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n              />\n              <Input\n                value={searchbyAuthor}\n                onChange={searchByAuthor}\n                name=\"author\"\n                placeholder=\"Author (Optional)\"\n              />\n              {/* <TextArea\n                onChange={handleInputChange}\n                name=\"synopsis\"\n                placeholder=\"Synopsis (Optional)\"\n              /> */}\n              <FormBtn\n                // disabled={!(formObject.title)}\n                onClick={handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n          </Col>\n\n        </Row>\n        <div id=\"displayBookHere\">\n          {\n            books.map(book => (\n              <Card>\n                <Card.Header as=\"h5\" className=\"bg-light d-flex justify-content-between\">\n                 <Card.Title>{book.volumeInfo.title}\n                 \n                 </Card.Title>\n                 <Button onClick={ (event) => addToDatabase(event, book)}>Save</Button>\n                </Card.Header>\n                <Card.Body>{book.volumeInfo.authors}</Card.Body>\n                <Card.Text>{book.volumeInfo.description}</Card.Text>\n              </Card>\n            )\n            )\n          }\n        </div>\n      </Container>\n    );\n  }\n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}